//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PaddleControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PaddleControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PaddleControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PaddleControls"",
    ""maps"": [
        {
            ""name"": ""LeftPlayer"",
            ""id"": ""9a97c78b-457c-4470-8fc8-d89a9120204b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b831cc32-0f81-454e-891f-7f6f9e9f9c21"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2209730d-a725-402d-bcfe-f12163d78278"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e519eba8-b40c-4288-b38a-dc00f6d05b7f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e5dfb879-2fb9-40e0-9b7f-bc3fb2c6b550"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""db071979-7aa5-4c12-9607-cbb8dfc0d958"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cb176788-cca4-466d-bda0-8b29598e42f7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""RightPlayer"",
            ""id"": ""abbff22d-df5a-4baf-bf2e-261f95e6fddd"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""dcd20545-69ff-4336-8c40-10ad60b1ff18"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b84c3af0-1fa0-4ebe-a0aa-413f36ee9e26"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""658d492c-5856-4ddb-b9c1-e6bbc315d0c3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cf12e5c1-e8ce-469d-879a-17815a8c405b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""805b8d19-a543-4db7-8193-8f056856eea7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7c85b767-c6c8-4ef9-8f22-30eb53b0e922"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LeftPlayer
        m_LeftPlayer = asset.FindActionMap("LeftPlayer", throwIfNotFound: true);
        m_LeftPlayer_Move = m_LeftPlayer.FindAction("Move", throwIfNotFound: true);
        // RightPlayer
        m_RightPlayer = asset.FindActionMap("RightPlayer", throwIfNotFound: true);
        m_RightPlayer_Move = m_RightPlayer.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftPlayer
    private readonly InputActionMap m_LeftPlayer;
    private List<ILeftPlayerActions> m_LeftPlayerActionsCallbackInterfaces = new List<ILeftPlayerActions>();
    private readonly InputAction m_LeftPlayer_Move;
    public struct LeftPlayerActions
    {
        private @PaddleControls m_Wrapper;
        public LeftPlayerActions(@PaddleControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_LeftPlayer_Move;
        public InputActionMap Get() { return m_Wrapper.m_LeftPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftPlayerActions set) { return set.Get(); }
        public void AddCallbacks(ILeftPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ILeftPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ILeftPlayerActions instance)
        {
            if (m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftPlayerActions @LeftPlayer => new LeftPlayerActions(this);

    // RightPlayer
    private readonly InputActionMap m_RightPlayer;
    private List<IRightPlayerActions> m_RightPlayerActionsCallbackInterfaces = new List<IRightPlayerActions>();
    private readonly InputAction m_RightPlayer_Move;
    public struct RightPlayerActions
    {
        private @PaddleControls m_Wrapper;
        public RightPlayerActions(@PaddleControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_RightPlayer_Move;
        public InputActionMap Get() { return m_Wrapper.m_RightPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IRightPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IRightPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IRightPlayerActions instance)
        {
            if (m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_RightPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightPlayerActions @RightPlayer => new RightPlayerActions(this);
    public interface ILeftPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IRightPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
